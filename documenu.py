"""
This file includes functions that connect to Documenu API and retrieve information about
a restaurant's menu items.
"""
from json.decoder import JSONDecodeError
import os
import requests
from dotenv import load_dotenv
from nutritionix import get_nutrition_values

load_dotenv()


def get_restaurant_id(restaurant_name, restaurant_address):
    """
    The function gets the restaurant id of a particular restaurant using restaurant
    name and address. The restaurant id retrieved from this function will be used in
    get_restaurant_info function to get the menu items.
    """
    select_number_of_results = "10"

    url = "https://documenu.p.rapidapi.com/restaurants/search/fields"
    querystring = {
        "restaurant_name": restaurant_name,
        "address": restaurant_address,
        "size": select_number_of_results,
    }

    headers = {
        "x-api-key": os.getenv("x-api-key"),
        "x-rapidapi-host": os.getenv("x-rapidapi-host-documenu"),
        "x-rapidapi-key": os.getenv("x-rapidapi-key"),
    }
    try:
        response = requests.request("GET", url, headers=headers, params=querystring)
        j_response = response.json()
    except JSONDecodeError:
        return "Error"

    try:
        restaurant_id_parsed = j_response["data"][0]["restaurant_id"]
    except IndexError:
        return "Error"
    return restaurant_id_parsed


def get_restaurant_info(restaurant_id):
    """
    The function accepts the restaurant_id generated by the get_restaurant_id function. Then, it
    makes a get request to documenu API to retieve the menu items and their information including
    name, price, description, and nutrition information.
    """
    rid = str(restaurant_id)
    url = f"https://documenu.p.rapidapi.com/restaurant/{rid}"

    headers = {
        "x-api-key": os.getenv("x-api-key"),
        "x-rapidapi-host": os.getenv("x-rapidapi-host-documenu"),
        "x-rapidapi-key": os.getenv("x-rapidapi-key"),
    }
    response = requests.request("GET", url, headers=headers)
    j_response = response.json()

    menu = []
    description_error = "Description for this item does not exist"

    try:
        menu_options = j_response["result"]["menus"][0]["menu_sections"]
        for items in menu_options:
            food_name, price, description = extract_menu_items(items)
            if description == "":
                description = description_error

            if food_name is None or price is None:
                menu.append(
                    {
                        "error": "Key or Index Error",
                    }
                )
            else:
                nutrition_values = get_nutrition_values(food_name)
                menu.append(
                    {
                        "name": food_name,
                        "price": price,
                        "description": description,
                        "nutrition": nutrition_values,
                    }
                )
    except IndexError:
        menu.append(
            {
                "error": "Index Error",
            }
        )
    except KeyError:
        menu.append(
            {
                "error": "Index Error",
            }
        )

    return menu


def extract_menu_items(items_json):
    """
    This function accepts the json response from the Documenu get request as input and parses
    the json to retrieve desired values (i.e, name, price, description).
    """
    try:
        menu_items = items_json["menu_items"][0]
        food_name = menu_items["name"]
        price = menu_items["pricing"][0]["priceString"]
        description = menu_items["description"]

        return food_name, price, description
    except KeyError:
        return None, None, None
    except IndexError:
        return None, None, None
